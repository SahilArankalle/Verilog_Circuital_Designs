module fifo_16x8 (
    input wire clk,          // Clock
    input wire rst,          // Reset
    input wire [7:0] din,    // Data input
    input wire we,           // Write enable
    input wire re,           // Read enable
    output reg [7:0] dout,   // Data output
    output wire full,        // Full flag
    output wire empty        // Empty flag
);

// Internal registers and parameters
reg [4:0] wr_ptr, rd_ptr;     // Write and read pointers
reg [7:0] fifo [15:0];        // 16x8 FIFO memory array
integer k;

// Full and empty flag assignments
assign full = ((wr_ptr == 5'd16) && (rd_ptr == 5'd0)) ? 1'b1 : 1'b0;
assign empty = (rd_ptr == wr_ptr) ? 1'b1 : 1'b0;

// Write operation
always @(posedge clk) begin
    if (rst == 1'b1) begin
        // Reset FIFO and pointers
        for (k = 0; k < 16; k = k + 1) begin
            fifo[k] <= 0;
        end
        wr_ptr <= 0;
    end
    else if ((we == 1'b1) && (full == 1'b0)) begin
        // Write data to FIFO
        fifo[wr_ptr] <= din;
        wr_ptr <= wr_ptr + 1'b1;
    end
end

// Read operation
always @(posedge clk) begin
    if (rst == 1'b1) begin
        // Reset read pointer and output
        dout <= 0;
        rd_ptr <= 0;
    end
    else if ((re == 1'b1) && (empty == 1'b0)) begin
        // Read data from FIFO
        dout <= fifo[rd_ptr];
        rd_ptr <= rd_ptr + 1'b1;
    end
end

endmodule
